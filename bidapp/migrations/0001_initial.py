# Generated by Django 5.2.1 on 2025-05-13 01:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField()),
                ('section_id', models.CharField()),
                ('section_name', models.CharField()),
                ('bidder_name', models.CharField()),
                ('bid_amount', models.FloatField(blank=True, null=True)),
                ('bid_open_time', models.DateTimeField(blank=True, null=True)),
                ('crawl_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bid',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BidRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField()),
                ('section_name', models.CharField()),
                ('section_id', models.CharField()),
                ('bidder_name', models.CharField()),
                ('rank', models.IntegerField()),
                ('manager_name', models.CharField(blank=True, null=True)),
                ('win_amt', models.FloatField(blank=True, null=True)),
                ('crawl_time', models.DateTimeField(blank=True, null=True)),
                ('open_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bid_rank',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BidSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_name', models.CharField()),
                ('section_id', models.CharField()),
                ('bid_size', models.IntegerField(blank=True, null=True)),
                ('bid_open_time', models.DateTimeField(blank=True, null=True)),
                ('info_source', models.CharField(blank=True, null=True)),
                ('lot_ctl_amt', models.FloatField(blank=True, null=True)),
                ('session_size', models.IntegerField(blank=True, null=True)),
                ('crawl_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('winning_bidder', models.CharField(blank=True, null=True)),
                ('winning_amount', models.FloatField(blank=True, null=True)),
                ('winning_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bid_section',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('corp_code', models.CharField(unique=True)),
                ('corp', models.CharField(blank=True, null=True)),
                ('corp_asset', models.CharField(blank=True, null=True)),
                ('reg_address', models.CharField(blank=True, null=True)),
                ('valid_date', models.CharField(blank=True, null=True)),
                ('qualifications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, null=True, size=None)),
                ('bid_count', models.IntegerField(blank=True, null=True)),
                ('win_count', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'company_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeeInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('role', models.CharField(blank=True, null=True)),
                ('cert_code', models.CharField(blank=True, null=True, unique=True)),
                ('major', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, null=True, size=None)),
                ('valid_date', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'employee_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField(unique=True)),
                ('title', models.CharField(blank=True, null=True)),
                ('time_show', models.DateTimeField(blank=True, null=True)),
                ('platform_name', models.CharField(blank=True, null=True)),
                ('classify_show', models.CharField(blank=True, null=True)),
                ('url', models.CharField(blank=True, null=True)),
                ('notice_content', models.TextField(blank=True, null=True)),
                ('district_show', models.CharField(blank=True, null=True)),
                ('session_size', models.IntegerField(blank=True, null=True)),
                ('company_req', models.CharField(blank=True, null=True)),
                ('person_req', models.CharField(blank=True, null=True)),
                ('construction_funds', models.CharField(blank=True, null=True)),
                ('project_duration', models.CharField(blank=True, null=True)),
                ('crawl_time', models.DateTimeField(blank=True, null=True)),
                ('stage', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'project',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='电话')),
                ('company', models.CharField(blank=True, max_length=100, null=True, verbose_name='公司')),
                ('membership_level', models.CharField(choices=[('free', '免费会员'), ('silver', '银牌会员'), ('gold', '金牌会员'), ('vip', 'VIP会员')], default='free', max_length=10, verbose_name='会员等级')),
                ('membership_start', models.DateTimeField(blank=True, null=True, verbose_name='会员开始时间')),
                ('membership_end', models.DateTimeField(blank=True, null=True, verbose_name='会员结束时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
